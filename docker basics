To completely uninstall Docker:

Step 1

dpkg -l | grep -i docker
To identify what installed package you have:

Step 2

sudo apt-get purge -y docker-engine docker docker.io docker-ce  
sudo apt-get autoremove -y --purge docker-engine docker docker.io docker-ce  
The above commands will not remove images, containers, volumes, or user created configuration files on your host. If you wish to delete all images, containers, and volumes run the following commands:

sudo rm -rf /var/lib/docker
sudo rm /etc/apparmor.d/docker
sudo groupdel docker
sudo rm -rf /var/run/docker.sock
You have removed Docker from the system completely.

*****************************************************************

#create container
docker create [name:tag]
e.g. docker create nvidia/cuda:8.0-devel

#start up a NEW container from image
nvidia-docker run <image_id>

#run an existing container
nvidia-docker start <container_id>


#output the container stdout to host stdout
docker start --attach <container_id>

#view the logs of the container
docker logs <container_id>

#start a new container with name my_name from image image_id, run a command and then delete the container on exiting
nvidia-docker run --name <my_name> --rm <image_id> <input_command>

#start an existing container named mero
nvidia-docker start mero

#start an existing container named mero in interactive mode
nvidia-docker start -i mero

######################################################################################################################
#differences between original image and the modified container
docker diff <container_id>

#creating new image from modified container
docker commit <container_id> <new_image_name:tag>

When working with Containers
export	Export a container's filesystem as a tar archive
import	Import the contents from a tarball to create a filesystem image

When working with Images
save	Save one or more images to a tar archive (streamed to STDOUT by default)
load	Load an image from a tar archive or STDIN

docker save -o <export_file.tar> <image_name:tag> # -o write output to file instead of STDOUT

docker load --input <docker_image_file.tar>


##########################################################################################################################
DOCKERFILES
https://docs.docker.com/develop/develop-images/dockerfile_best-practices/

#start Dockerfile
#
FROM nvidia/cuda:8.0-devel <base_image>
RUN apt-get update <commands to execute and commit>
ENTRYPOINT ["/bin/sh", "-c"]
CMD ["nvidia-smi"] <defaults for executing container>
#
#end Dockerfile

docker build -t <name:tag> .

##########################################################################################################################
#rename image name
docker tag <old_name:old_tag> <new_name:new_tag>

#pull image from docker repo
docker pull <USER/IMAGE:TAG>

#to ensure the latest images, first pull and then run
docker pull <IMAGE> && nvidia-docker run <IMAGE>

##########################################################################################################################
MNIST with tensorflow

docker pull tensorflow/tensorflow:1.3.0-devel-gpu

nvidia-docker run --rm <IMAGE-ID> python /tensorflow/tensorflow/examples/tutorials/mnist/mnist_deep.py

#########################################################################################################################
#interactive mode

#Here the --detach option will tell docker to run the image container in the background and give the command prompt back.
nvidia-docker run --interactive --detach <IMAGE-ID>

#execute commands on the container created from the images
docker exec <CONTAINER_ID> <command>

#stop container
docker stop <CONTAINER-ID>

#remove container
docker rm <CONTAINER-ID>
##########################################################################################################################
#find files by filename
docker exec <CONTAINER-ID> find / -name "*mnist*"

#find files by filename igonring cases
docker exec <CONTAINER-ID> find / -iname "*mnist*.py"

#find python interpreter
docker exec <CONTAINER-ID> find / -name "python2.7" | grep bin












